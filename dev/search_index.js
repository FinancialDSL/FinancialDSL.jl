var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#MarketData","page":"API Reference","title":"MarketData","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"FinancialDSL.MarketData.AbstractMarketDataProvider\nFinancialDSL.MarketData.get_value\nFinancialDSL.MarketData.get_serie_currency\nFinancialDSL.MarketData.EmptyMarketDataProvider","category":"page"},{"location":"api/#FinancialDSL.MarketData.AbstractMarketDataProvider","page":"API Reference","title":"FinancialDSL.MarketData.AbstractMarketDataProvider","text":"Interface\n\nMarketData.get_value(provider, serie_id, at, asof::Date; locf::Bool=false) :: Union{Missing, T}\nMarketData.get_serie_currency(provider, serie_id) :: Union{Nothing, Currecies.Currency}\nMarketData.has_serie(provider, serie_id) :: Bool\n\nArguments\n\nat : a key to the value of the time series.\nasof : the closing date at which the time series is being assessed. This is usually set to the pricing date.\nlocf : last observation carried forward. Use locf=true to repeat the latest observation prior to at.\n\nProvided methods\n\nMarketData.has_value(provider, serie_id, at, asof::Date; locf::Bool=false) :: Bool\nMarketData.get_cash(provider, serie_id, at, asof::Date; locf::Bool=false) :: Union{Missing, Currencies.Cash}\nMarketData.assert_has_serie(provider, serie_id)\n\n\n\n\n\n","category":"type"},{"location":"api/#FinancialDSL.MarketData.get_value","page":"API Reference","title":"FinancialDSL.MarketData.get_value","text":"get_value(provider, serie_id, at, asof::Date; locf::Bool=false) :: Union{Missing, T}\n\nReturns a value for serie_id at state (or date) at.\n\nArguments\n\nat : a key to the value of the time series.\nasof : the date at which the time series is being assessed.\nlocf : last observation carried forward. Use locf=true to repeat the latest observation prior to at.\n\nThis method should error if provider does not know about serie_id. Use MarketData.assert_has_serie for that.\n\n\n\n\n\n","category":"function"},{"location":"api/#FinancialDSL.MarketData.get_serie_currency","page":"API Reference","title":"FinancialDSL.MarketData.get_serie_currency","text":"get_serie_currency(provider, serie_id) :: Union{Nothing, Currecies.Currency}\n\nReturns the currency in which serie_id is expressed. Returns nothing if serie_id is not based on a currency.\n\nThis method should error if provider does not know about serie_id. Use MarketData.assert_has_serie for that.\n\n\n\n\n\n","category":"function"},{"location":"api/#FinancialDSL.MarketData.EmptyMarketDataProvider","page":"API Reference","title":"FinancialDSL.MarketData.EmptyMarketDataProvider","text":"A Market Data provided that has no data. Useful when calculation does not depend on Market Data.\n\n\n\n\n\n","category":"type"},{"location":"api/#Core","page":"API Reference","title":"Core","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"FinancialDSL.Core.Observable\nFinancialDSL.Core.PricingDate\nFinancialDSL.Core.Konst","category":"page"},{"location":"api/#FinancialDSL.Core.Observable","page":"API Reference","title":"FinancialDSL.Core.Observable","text":"Represents a time-varying quantity of type {T}. So, its value is indexed by a date or datetime.\n\n\n\n\n\n","category":"type"},{"location":"api/#FinancialDSL.Core.PricingDate","page":"API Reference","title":"FinancialDSL.Core.PricingDate","text":"PricingDate <: Observable{Date}\n\nRepresents the pricing date\n\n\n\n\n\n","category":"type"},{"location":"api/#FinancialDSL.Core.Konst","page":"API Reference","title":"FinancialDSL.Core.Konst","text":"The value of Konst(x) is always x at any date.\n\n\n\n\n\n","category":"type"},{"location":"#FinancialDSL.jl","page":"Home","title":"FinancialDSL.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DSL for Financial Contracts.","category":"page"},{"location":"#Requirements","page":"Home","title":"Requirements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia v1.2 or newer.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"From a Julia session, run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\n\njulia> Pkg.add(\"FinancialDSL\")","category":"page"},{"location":"#Source-Code","page":"Home","title":"Source Code","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The source code for this package is hosted at https://github.com/FinancialDSL/FinancialDSL.jl.","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The source code for the package FinancialDSL.jl is licensed under the MIT License.","category":"page"}]
}
